# Azure DevOps Pipeline for Flask Application to AKS
# Build Docker image, push to ACR, and deploy to AKS

# CI 觸發條件 - 只有相關檔案變更時才觸發
trigger:
  branches:
    include:
    - main
  paths:
    include:
    - azure-devops/py-flask/**  # 只有 Flask 應用相關檔案
    exclude:
    - docs/**                   # 排除文檔變更
    - '*.md'                    # 排除 Markdown 檔案
    - terraform/**              # 排除基礎設施變更 (除非需要)
    - tmp/**                    # 排除臨時檔案

variables:
  # Container Registry 設定
  containerRegistry: 'acrdev9vgrsdq8.azurecr.io'
  imageRepository: 'py-flask'
  dockerfilePath: '$(Build.SourcesDirectory)/azure-devops/py-flask/Dockerfile'
  tag: '$(Build.BuildId)'
  
  # AKS 設定
  resourceGroupName: 'rg-aks-dev'
  aksClusterName: 'aks-dev-cluster'
  k8sNamespace: 'py-flask-app'
  
  # Build Agent
  poolName: 'Kai-mac-host'

stages:
- stage: Build
  displayName: 'Build and Push Docker Image'
  jobs:
  - job: Build
    displayName: 'Build Docker Image'
    pool:
      name: $(poolName)
    steps:
    # ACR 登入
    - task: Docker@2
      displayName: 'Login to Azure Container Registry'
      inputs:
        command: 'login'
        containerRegistry: 'acrdev9vgrsdq8'

    # 設定 buildx 並建置跨平台映像
    - script: |
        docker buildx create --use --name multiarch --driver docker-container
        docker buildx inspect --bootstrap
        docker buildx build \
          --platform linux/amd64 \
          --tag $(containerRegistry)/$(imageRepository):$(tag) \
          --tag $(containerRegistry)/$(imageRepository):latest \
          --push \
          -f $(dockerfilePath) \
          $(Build.SourcesDirectory)/azure-devops/py-flask
      displayName: 'Build and Push Multi-platform Docker Image (AMD64)'

- stage: Deploy
  displayName: 'Deploy to AKS'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: 'Deploy to AKS'
    pool:
      name: $(poolName)
    environment: 'aks-dev-environment'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          
          - task: KubernetesManifest@0
            displayName: 'Create/Update Namespace'
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'aks-dev-connection'
              namespace: '$(k8sNamespace)'
              manifests: '$(Build.SourcesDirectory)/azure-devops/py-flask/k8s-manifests/namespace.yaml'

          - task: KubernetesManifest@0
            displayName: 'Deploy Application'
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'aks-dev-connection'
              namespace: '$(k8sNamespace)'
              manifests: |
                $(Build.SourcesDirectory)/azure-devops/py-flask/k8s-manifests/deployment.yaml
                $(Build.SourcesDirectory)/azure-devops/py-flask/k8s-manifests/service.yaml
                $(Build.SourcesDirectory)/azure-devops/py-flask/k8s-manifests/ingress.yaml
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'

          - task: Kubernetes@1
            displayName: 'Get Service Status'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'aks-dev-connection'
              namespace: '$(k8sNamespace)'
              command: 'get'
              arguments: 'pods,svc,ingress'
              outputFormat: 'wide'

# Pull Request 觸發設定 - 同樣只針對相關檔案
pr:
  branches:
    include:
    - main
  paths:
    include:
    - azure-devops/py-flask/**  # 只有 Flask 應用相關檔案
    exclude:
    - docs/**                   # 排除文檔變更
    - '*.md'                    # 排除 Markdown 檔案
    - terraform/**              # 排除基礎設施變更
    - tmp/**                    # 排除臨時檔案

# 排程建置 (可選)
schedules:
- cron: "0 2 * * *"  # 每天凌晨 2 點建置
  displayName: Daily build
  branches:
    include:
    - main
  always: false